

<div class="container"
 <%# data-controller="playlist" %>
 >
  <h1><%= @playlist.title %></h1>

  <ul class='playlist-list'>
    <%
      # @playlist_sounds.each do |playlist_sound|
      playlist_sound = @playlist_sounds.first
      %>
      <% sound = playlist_sound.sound %>
      <li class='playlist-item'>
        <%= sound.title %>
        <% if sound.audio.audio? %>
        <div class="audio-tag" data-playlist-target="audiotag">
          <%# <!-- %>
          <%= audio_tag url_for(sound.audio),
                    class:"audio",
                    id:"audio-player",
                    controls: false %>
                    <%# --> %>
        </div>

        <% end %>
        <% if current_user == sound.user %>
          <%= link_to "remove", playlist_sound_path(playlist_sound), data: { "turbo-method": :delete } %>
        <% end %>
        <%# SOUND CONTROLS %>
        <div class="controls">
          <button id="play-button" data-playing="false">Play/Pause</button>
          <button id="stop-button">Stop</button>
          <button id="loop-button">Loop</button>
          <button id="delay-button">Add Delay</button>
          <button id="distortion-button">Distortion</button>
          <!--
          <button data-playing="false" role="switch" aria-checked="false" data-action="click->playlist#play" data-playlist-target="playbutton">
            <span>Play/Pause</span>
          </button>
          -->
        </div>
        <script>
          const audioElement = document.getElementById('audio-player');
          const audioContext = new AudioContext();

          const track = audioContext.createMediaElementSource(audioElement);

          const playButton = document.getElementById('play-button');

          // play pause audio
          playButton.addEventListener('click', function() {
            track.connect(audioContext.destination);
            // check if context is in suspended state (autoplay policy)
            if (audioContext.state === 'suspended') {
              audioContext.resume();
            }

            if (this.dataset.playing === 'false') {
              audioElement.play();
              this.dataset.playing = 'true';
            // if track is playing pause it
            } else if (this.dataset.playing === 'true') {
              audioElement.pause();
              this.dataset.playing = 'false';
            }

            // Button handling
            let state = this.getAttribute('aria-checked') === "true" ? true : false;
            this.setAttribute( 'aria-checked', state ? "false" : "true" );
          }, false);

          // if track ends
          audioElement.addEventListener('ended', () => {
            playButton.dataset.playing = 'false';
            playButton.setAttribute( "aria-checked", "false" );
          }, false);

          // const stopButton = document.getElementById('stop-button');
          // playButton.addEventListener('click', () => {
          //   audioElement.stop();
          // });

          // Loop
          const loopButton = document.getElementById('loop-button');
          loopButton.addEventListener('click', () => {
            audioElement.loop = !audioElement.loop;
            loopButton.classList.toggle('active', audioElement.loop);
          });


          // Delay
          const delayButton = document.getElementById('delay-button');
          delayButton.addEventListener('click', () => {
            audioContext.resume().then(() => {
              // const source = audioContext.createMediaElementSource(audioElement);

              const delayNode = audioContext.createDelay();
              delayNode.delayTime.value = 0.1; // set delay time to 0.1 seconds

              // source.connect(delayNode);
              track.connect(delayNode).connect(audioContext.destination);

              // audioElement.play();

              // delayButton.disabled = true;
              // audioElement.addEventListener('ended', () => {
              //   delayNode.disconnect();
              //   delayButton.disabled = false;
              // });
            });
          });

          // Distortion
          const distortionButton = document.getElementById('distortion-button');
          const distortionCurve = new Float32Array([0, 0.5, 1]);
          distortionButton.addEventListener('click', () => {
            // Create a media element source node for the audio player
            audioContext.resume().then(() => {
              // const source = audioContext.createMediaElementSource(audioElement);

              // Create a wave shaper node for the distortion effect
              const waveShaperNode = audioContext.createWaveShaper();
              waveShaperNode.curve = distortionCurve;

              // Connect the nodes to the audio context
              track.connect(waveShaperNode).connect(waveShaperNode).connect(audioContext.destination);

              // Play the audio
              // audioElement.play();
            });
          });
        </script>
      </li>
    <%
      # end
    %>
  </ul>


  <%= link_to "delete playlist", playlist_path(@playlist), data: { "turbo-method": :delete } %>
</div>
